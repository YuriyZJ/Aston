Реализовать микросервис(notification-service) для отправки сообщения на почту при удалении или добавлении пользователя.
- Использовать необходимые модули spring и kafka.
- При удалении или создании юзера приложение, реализованное до этого(user-service), должно отправлять сообщение в kafka, в котором содержится информация об операции(удаление или создание) и email юзера.
- Новый микросервис(notification-service) должен получить сообщение из kafka и отправить сообщение на почту юзера в зависимости от операции: удаление - Здравствуйте! Ваш аккаунт был удалён. Создание - Здравствуйте! Ваш аккаунт на сайте ваш сайт был успешно создан.
- Также отдельно добавить API, которая будет отправлять сообщение на почту(почти тот же функционал, что и через кафку).
- Написать интеграционные тесты для проверки отправки сообщения на почту.


1. Для чего нам нужен класс EmailEvent и что значит в поле private String operation; эти значения CREATE or DELETE, мне их нужно указать или будет где то потом указываться?

2. Для чего KafkaProducerService и все поля расшифровать зачем и как работает

3. Для чего нужен KafkaProducerConfig и его нет в структуре проекта, который ты ранее скидывал

notification-service
1. Скопируй тот же EmailEvent как в user-service, чтобы десериализовать сообщения. десериализовать - что значит?

2. KafkaConsumerConfig поясни все поля, для чего нужны и почему появились

3. EmailService.java поясни все поля, для чего нужны и почему появились

4. EmailConsumer.java и API: контроллер EmailManualController.java, поясни все поля, для чего нужны и почему появились и для чего нужны эти классы?

5. Расшифруй	поля application.yml и docker-compose.yml


Ты готовишь проект к запуску в Docker-контейнерах:
	•	Сначала собрал .jar файлы для двух сервисов.
	•	Затем укажешь в Dockerfile, как их запускать.
	•	После этого Docker запускает их как два независимых приложения — в разных контейнерах, но общающихся через Kafka.